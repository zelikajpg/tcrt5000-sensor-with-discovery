
tcrt5000-sens.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d74  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002efc  08002efc  00012efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f0c  08002f0c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f0c  08002f0c  00012f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f14  08002f14  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f14  08002f14  00012f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f18  08002f18  00012f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000b8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000c4  200000c4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009deb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001650  00000000  00000000  00029e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a48  00000000  00000000  0002b478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000990  00000000  00000000  0002bec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020f6e  00000000  00000000  0002c850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b1f4  00000000  00000000  0004d7be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0fc7  00000000  00000000  000589b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00129979  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b14  00000000  00000000  001299cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002ee4 	.word	0x08002ee4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002ee4 	.word	0x08002ee4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fb34 	bl	8000b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f880 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f9ae 	bl	8000838 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004dc:	f000 f8e4 	bl	80006a8 <MX_ADC1_Init>
  MX_TIM2_Init();
 80004e0:	f000 f934 	bl	800074c <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004e4:	2100      	movs	r1, #0
 80004e6:	4837      	ldr	r0, [pc, #220]	; (80005c4 <main+0xf8>)
 80004e8:	f001 fef2 	bl	80022d0 <HAL_TIM_PWM_Start>
     // HAL_ADCEx_Calibration_Start(&hadc1);

      while (1)
      {
         // Start ADC Conversion
          HAL_ADC_Start(&hadc1);
 80004ec:	4836      	ldr	r0, [pc, #216]	; (80005c8 <main+0xfc>)
 80004ee:	f000 fbff 	bl	8000cf0 <HAL_ADC_Start>
         // Poll ADC1 Perihperal & TimeOut = 1mSec
          HAL_ADC_PollForConversion(&hadc1, 1);
 80004f2:	2101      	movs	r1, #1
 80004f4:	4834      	ldr	r0, [pc, #208]	; (80005c8 <main+0xfc>)
 80004f6:	f000 fccd 	bl	8000e94 <HAL_ADC_PollForConversion>

         // Read The ADC Conversion Result & Map It To PWM DutyCycle
          AD_RES = HAL_ADC_GetValue(&hadc1);
 80004fa:	4833      	ldr	r0, [pc, #204]	; (80005c8 <main+0xfc>)
 80004fc:	f000 fd55 	bl	8000faa <HAL_ADC_GetValue>
 8000500:	4603      	mov	r3, r0
 8000502:	b29a      	uxth	r2, r3
 8000504:	4b31      	ldr	r3, [pc, #196]	; (80005cc <main+0x100>)
 8000506:	801a      	strh	r2, [r3, #0]
          if(AD_RES > 4075){
 8000508:	4b30      	ldr	r3, [pc, #192]	; (80005cc <main+0x100>)
 800050a:	881b      	ldrh	r3, [r3, #0]
 800050c:	f640 72eb 	movw	r2, #4075	; 0xfeb
 8000510:	4293      	cmp	r3, r2
 8000512:	d909      	bls.n	8000528 <main+0x5c>
        	  distance = (AD_RES - 4075) * 5;
 8000514:	4b2d      	ldr	r3, [pc, #180]	; (80005cc <main+0x100>)
 8000516:	881b      	ldrh	r3, [r3, #0]
 8000518:	f6a3 72eb 	subw	r2, r3, #4075	; 0xfeb
 800051c:	4613      	mov	r3, r2
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	4413      	add	r3, r2
 8000522:	461a      	mov	r2, r3
 8000524:	4b2a      	ldr	r3, [pc, #168]	; (80005d0 <main+0x104>)
 8000526:	601a      	str	r2, [r3, #0]
          }
          TIM2->CCR1 = (AD_RES<<4);
 8000528:	4b28      	ldr	r3, [pc, #160]	; (80005cc <main+0x100>)
 800052a:	881b      	ldrh	r3, [r3, #0]
 800052c:	011a      	lsls	r2, r3, #4
 800052e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000532:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_Delay(1);
 8000534:	2001      	movs	r0, #1
 8000536:	f000 fb73 	bl	8000c20 <HAL_Delay>

          if (distance <= 40)
 800053a:	4b25      	ldr	r3, [pc, #148]	; (80005d0 <main+0x104>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2b28      	cmp	r3, #40	; 0x28
 8000540:	d806      	bhi.n	8000550 <main+0x84>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_All, GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000548:	4822      	ldr	r0, [pc, #136]	; (80005d4 <main+0x108>)
 800054a:	f001 f9db 	bl	8001904 <HAL_GPIO_WritePin>
 800054e:	e7cd      	b.n	80004ec <main+0x20>
          else if(distance <=60)
 8000550:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <main+0x104>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b3c      	cmp	r3, #60	; 0x3c
 8000556:	d80c      	bhi.n	8000572 <main+0xa6>
          {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000558:	2201      	movs	r2, #1
 800055a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800055e:	481d      	ldr	r0, [pc, #116]	; (80005d4 <main+0x108>)
 8000560:	f001 f9d0 	bl	8001904 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800056a:	481a      	ldr	r0, [pc, #104]	; (80005d4 <main+0x108>)
 800056c:	f001 f9ca 	bl	8001904 <HAL_GPIO_WritePin>
 8000570:	e7bc      	b.n	80004ec <main+0x20>
          }
          else if(distance <= 80)
 8000572:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <main+0x104>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2b50      	cmp	r3, #80	; 0x50
 8000578:	d80c      	bhi.n	8000594 <main+0xc8>
          {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_SET);
 800057a:	2201      	movs	r2, #1
 800057c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000580:	4814      	ldr	r0, [pc, #80]	; (80005d4 <main+0x108>)
 8000582:	f001 f9bf 	bl	8001904 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800058c:	4811      	ldr	r0, [pc, #68]	; (80005d4 <main+0x108>)
 800058e:	f001 f9b9 	bl	8001904 <HAL_GPIO_WritePin>
 8000592:	e7ab      	b.n	80004ec <main+0x20>
          }
          else if(distance <= 99)
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <main+0x104>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b63      	cmp	r3, #99	; 0x63
 800059a:	d80c      	bhi.n	80005b6 <main+0xea>
          {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80005a2:	480c      	ldr	r0, [pc, #48]	; (80005d4 <main+0x108>)
 80005a4:	f001 f9ae 	bl	8001904 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ae:	4809      	ldr	r0, [pc, #36]	; (80005d4 <main+0x108>)
 80005b0:	f001 f9a8 	bl	8001904 <HAL_GPIO_WritePin>
 80005b4:	e79a      	b.n	80004ec <main+0x20>
          }
          else
          {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_All, GPIO_PIN_SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005bc:	4805      	ldr	r0, [pc, #20]	; (80005d4 <main+0x108>)
 80005be:	f001 f9a1 	bl	8001904 <HAL_GPIO_WritePin>
          HAL_ADC_Start(&hadc1);
 80005c2:	e793      	b.n	80004ec <main+0x20>
 80005c4:	20000070 	.word	0x20000070
 80005c8:	20000028 	.word	0x20000028
 80005cc:	200000bc 	.word	0x200000bc
 80005d0:	200000b8 	.word	0x200000b8
 80005d4:	40020c00 	.word	0x40020c00

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2230      	movs	r2, #48	; 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 fc74 	bl	8002ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <SystemClock_Config+0xc8>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	4a26      	ldr	r2, [pc, #152]	; (80006a0 <SystemClock_Config+0xc8>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	; 0x40
 800060c:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <SystemClock_Config+0xc8>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <SystemClock_Config+0xcc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a20      	ldr	r2, [pc, #128]	; (80006a4 <SystemClock_Config+0xcc>)
 8000622:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <SystemClock_Config+0xcc>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000634:	2302      	movs	r3, #2
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000638:	2301      	movs	r3, #1
 800063a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063c:	2310      	movs	r3, #16
 800063e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000640:	2302      	movs	r3, #2
 8000642:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000644:	2300      	movs	r3, #0
 8000646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000648:	2308      	movs	r3, #8
 800064a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800064c:	2348      	movs	r3, #72	; 0x48
 800064e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000654:	2304      	movs	r3, #4
 8000656:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 0320 	add.w	r3, r7, #32
 800065c:	4618      	mov	r0, r3
 800065e:	f001 f96b 	bl	8001938 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000668:	f000 f938 	bl	80008dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	230f      	movs	r3, #15
 800066e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000670:	2302      	movs	r3, #2
 8000672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2102      	movs	r1, #2
 8000688:	4618      	mov	r0, r3
 800068a:	f001 fbcd 	bl	8001e28 <HAL_RCC_ClockConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000694:	f000 f922 	bl	80008dc <Error_Handler>
  }
}
 8000698:	bf00      	nop
 800069a:	3750      	adds	r7, #80	; 0x50
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ae:	463b      	mov	r3, r7
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006ba:	4b21      	ldr	r3, [pc, #132]	; (8000740 <MX_ADC1_Init+0x98>)
 80006bc:	4a21      	ldr	r2, [pc, #132]	; (8000744 <MX_ADC1_Init+0x9c>)
 80006be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <MX_ADC1_Init+0x98>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006c6:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <MX_ADC1_Init+0x98>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006cc:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <MX_ADC1_Init+0x98>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d2:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <MX_ADC1_Init+0x98>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d8:	4b19      	ldr	r3, [pc, #100]	; (8000740 <MX_ADC1_Init+0x98>)
 80006da:	2200      	movs	r2, #0
 80006dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006e0:	4b17      	ldr	r3, [pc, #92]	; (8000740 <MX_ADC1_Init+0x98>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <MX_ADC1_Init+0x98>)
 80006e8:	4a17      	ldr	r2, [pc, #92]	; (8000748 <MX_ADC1_Init+0xa0>)
 80006ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <MX_ADC1_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006f2:	4b13      	ldr	r3, [pc, #76]	; (8000740 <MX_ADC1_Init+0x98>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_ADC1_Init+0x98>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_ADC1_Init+0x98>)
 8000702:	2201      	movs	r2, #1
 8000704:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000706:	480e      	ldr	r0, [pc, #56]	; (8000740 <MX_ADC1_Init+0x98>)
 8000708:	f000 faae 	bl	8000c68 <HAL_ADC_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000712:	f000 f8e3 	bl	80008dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000716:	2307      	movs	r3, #7
 8000718:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800071a:	2301      	movs	r3, #1
 800071c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4806      	ldr	r0, [pc, #24]	; (8000740 <MX_ADC1_Init+0x98>)
 8000728:	f000 fc4c 	bl	8000fc4 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000732:	f000 f8d3 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000028 	.word	0x20000028
 8000744:	40012000 	.word	0x40012000
 8000748:	0f000001 	.word	0x0f000001

0800074c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08e      	sub	sp, #56	; 0x38
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000752:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000760:	f107 0320 	add.w	r3, r7, #32
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
 8000778:	615a      	str	r2, [r3, #20]
 800077a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800077c:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <MX_TIM2_Init+0xe8>)
 800077e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000782:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000784:	4b2b      	ldr	r3, [pc, #172]	; (8000834 <MX_TIM2_Init+0xe8>)
 8000786:	2200      	movs	r2, #0
 8000788:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078a:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <MX_TIM2_Init+0xe8>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000790:	4b28      	ldr	r3, [pc, #160]	; (8000834 <MX_TIM2_Init+0xe8>)
 8000792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000796:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000798:	4b26      	ldr	r3, [pc, #152]	; (8000834 <MX_TIM2_Init+0xe8>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800079e:	4b25      	ldr	r3, [pc, #148]	; (8000834 <MX_TIM2_Init+0xe8>)
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007a4:	4823      	ldr	r0, [pc, #140]	; (8000834 <MX_TIM2_Init+0xe8>)
 80007a6:	f001 fceb 	bl	8002180 <HAL_TIM_Base_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80007b0:	f000 f894 	bl	80008dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007be:	4619      	mov	r1, r3
 80007c0:	481c      	ldr	r0, [pc, #112]	; (8000834 <MX_TIM2_Init+0xe8>)
 80007c2:	f001 ff0f 	bl	80025e4 <HAL_TIM_ConfigClockSource>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80007cc:	f000 f886 	bl	80008dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007d0:	4818      	ldr	r0, [pc, #96]	; (8000834 <MX_TIM2_Init+0xe8>)
 80007d2:	f001 fd24 	bl	800221e <HAL_TIM_PWM_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80007dc:	f000 f87e 	bl	80008dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007e8:	f107 0320 	add.w	r3, r7, #32
 80007ec:	4619      	mov	r1, r3
 80007ee:	4811      	ldr	r0, [pc, #68]	; (8000834 <MX_TIM2_Init+0xe8>)
 80007f0:	f002 fad0 	bl	8002d94 <HAL_TIMEx_MasterConfigSynchronization>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80007fa:	f000 f86f 	bl	80008dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007fe:	2360      	movs	r3, #96	; 0x60
 8000800:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2200      	movs	r2, #0
 8000812:	4619      	mov	r1, r3
 8000814:	4807      	ldr	r0, [pc, #28]	; (8000834 <MX_TIM2_Init+0xe8>)
 8000816:	f001 fe23 	bl	8002460 <HAL_TIM_PWM_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000820:	f000 f85c 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000824:	4803      	ldr	r0, [pc, #12]	; (8000834 <MX_TIM2_Init+0xe8>)
 8000826:	f000 f8eb 	bl	8000a00 <HAL_TIM_MspPostInit>

}
 800082a:	bf00      	nop
 800082c:	3738      	adds	r7, #56	; 0x38
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000070 	.word	0x20000070

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <MX_GPIO_Init+0x9c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a1f      	ldr	r2, [pc, #124]	; (80008d4 <MX_GPIO_Init+0x9c>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <MX_GPIO_Init+0x9c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <MX_GPIO_Init+0x9c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a18      	ldr	r2, [pc, #96]	; (80008d4 <MX_GPIO_Init+0x9c>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_GPIO_Init+0x9c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_GPIO_Init+0x9c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a11      	ldr	r2, [pc, #68]	; (80008d4 <MX_GPIO_Init+0x9c>)
 8000890:	f043 0308 	orr.w	r3, r3, #8
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_GPIO_Init+0x9c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0308 	and.w	r3, r3, #8
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80008a8:	480b      	ldr	r0, [pc, #44]	; (80008d8 <MX_GPIO_Init+0xa0>)
 80008aa:	f001 f82b 	bl	8001904 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008ae:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	4619      	mov	r1, r3
 80008c6:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_GPIO_Init+0xa0>)
 80008c8:	f000 fe80 	bl	80015cc <HAL_GPIO_Init>

}
 80008cc:	bf00      	nop
 80008ce:	3720      	adds	r7, #32
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020c00 	.word	0x40020c00

080008dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e0:	b672      	cpsid	i
}
 80008e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <Error_Handler+0x8>
	...

080008e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <HAL_MspInit+0x4c>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	4a0f      	ldr	r2, [pc, #60]	; (8000934 <HAL_MspInit+0x4c>)
 80008f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008fc:	6453      	str	r3, [r2, #68]	; 0x44
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <HAL_MspInit+0x4c>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <HAL_MspInit+0x4c>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <HAL_MspInit+0x4c>)
 8000914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000918:	6413      	str	r3, [r2, #64]	; 0x40
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_MspInit+0x4c>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800

08000938 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	; 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a17      	ldr	r2, [pc, #92]	; (80009b4 <HAL_ADC_MspInit+0x7c>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d127      	bne.n	80009aa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <HAL_ADC_MspInit+0x80>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	4a15      	ldr	r2, [pc, #84]	; (80009b8 <HAL_ADC_MspInit+0x80>)
 8000964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000968:	6453      	str	r3, [r2, #68]	; 0x44
 800096a:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <HAL_ADC_MspInit+0x80>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_ADC_MspInit+0x80>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <HAL_ADC_MspInit+0x80>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <HAL_ADC_MspInit+0x80>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000992:	2380      	movs	r3, #128	; 0x80
 8000994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000996:	2303      	movs	r3, #3
 8000998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <HAL_ADC_MspInit+0x84>)
 80009a6:	f000 fe11 	bl	80015cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009aa:	bf00      	nop
 80009ac:	3728      	adds	r7, #40	; 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40012000 	.word	0x40012000
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020000 	.word	0x40020000

080009c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009d0:	d10d      	bne.n	80009ee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <HAL_TIM_Base_MspInit+0x3c>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	4a08      	ldr	r2, [pc, #32]	; (80009fc <HAL_TIM_Base_MspInit+0x3c>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6413      	str	r3, [r2, #64]	; 0x40
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_TIM_Base_MspInit+0x3c>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009ee:	bf00      	nop
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800

08000a00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a20:	d11d      	bne.n	8000a5e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <HAL_TIM_MspPostInit+0x68>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a0f      	ldr	r2, [pc, #60]	; (8000a68 <HAL_TIM_MspPostInit+0x68>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <HAL_TIM_MspPostInit+0x68>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	4619      	mov	r1, r3
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <HAL_TIM_MspPostInit+0x6c>)
 8000a5a:	f000 fdb7 	bl	80015cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a5e:	bf00      	nop
 8000a60:	3720      	adds	r7, #32
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020000 	.word	0x40020000

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abc:	f000 f890 	bl	8000be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <SystemInit+0x20>)
 8000aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ace:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <SystemInit+0x20>)
 8000ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aec:	480d      	ldr	r0, [pc, #52]	; (8000b24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aee:	490e      	ldr	r1, [pc, #56]	; (8000b28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000af0:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a0b      	ldr	r2, [pc, #44]	; (8000b30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b04:	4c0b      	ldr	r4, [pc, #44]	; (8000b34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b12:	f7ff ffd7 	bl	8000ac4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b16:	f002 f9b9 	bl	8002e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b1a:	f7ff fcd7 	bl	80004cc <main>
  bx  lr    
 8000b1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b28:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b2c:	08002f1c 	.word	0x08002f1c
  ldr r2, =_sbss
 8000b30:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b34:	200000c4 	.word	0x200000c4

08000b38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC_IRQHandler>
	...

08000b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b40:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_Init+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <HAL_Init+0x40>)
 8000b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <HAL_Init+0x40>)
 8000b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <HAL_Init+0x40>)
 8000b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b64:	2003      	movs	r0, #3
 8000b66:	f000 fcfd 	bl	8001564 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6a:	200f      	movs	r0, #15
 8000b6c:	f000 f808 	bl	8000b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b70:	f7ff feba 	bl	80008e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023c00 	.word	0x40023c00

08000b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_InitTick+0x54>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_InitTick+0x58>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4619      	mov	r1, r3
 8000b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 fd07 	bl	80015b2 <HAL_SYSTICK_Config>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e00e      	b.n	8000bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d80a      	bhi.n	8000bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f000 fcdd 	bl	800157a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc0:	4a06      	ldr	r2, [pc, #24]	; (8000bdc <HAL_InitTick+0x5c>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e000      	b.n	8000bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000004 	.word	0x20000004

08000be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_IncTick+0x20>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_IncTick+0x24>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <HAL_IncTick+0x24>)
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20000008 	.word	0x20000008
 8000c04:	200000c0 	.word	0x200000c0

08000c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <HAL_GetTick+0x14>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	200000c0 	.word	0x200000c0

08000c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c28:	f7ff ffee 	bl	8000c08 <HAL_GetTick>
 8000c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c38:	d005      	beq.n	8000c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <HAL_Delay+0x44>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4413      	add	r3, r2
 8000c44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c46:	bf00      	nop
 8000c48:	f7ff ffde 	bl	8000c08 <HAL_GetTick>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d8f7      	bhi.n	8000c48 <HAL_Delay+0x28>
  {
  }
}
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008

08000c68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c70:	2300      	movs	r3, #0
 8000c72:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e033      	b.n	8000ce6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d109      	bne.n	8000c9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff fe56 	bl	8000938 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2200      	movs	r2, #0
 8000c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f003 0310 	and.w	r3, r3, #16
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d118      	bne.n	8000cd8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000cae:	f023 0302 	bic.w	r3, r3, #2
 8000cb2:	f043 0202 	orr.w	r2, r3, #2
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f000 faa4 	bl	8001208 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f023 0303 	bic.w	r3, r3, #3
 8000cce:	f043 0201 	orr.w	r2, r3, #1
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	641a      	str	r2, [r3, #64]	; 0x40
 8000cd6:	e001      	b.n	8000cdc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d101      	bne.n	8000d0a <HAL_ADC_Start+0x1a>
 8000d06:	2302      	movs	r3, #2
 8000d08:	e0b2      	b.n	8000e70 <HAL_ADC_Start+0x180>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d018      	beq.n	8000d52 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	689a      	ldr	r2, [r3, #8]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f042 0201 	orr.w	r2, r2, #1
 8000d2e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d30:	4b52      	ldr	r3, [pc, #328]	; (8000e7c <HAL_ADC_Start+0x18c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a52      	ldr	r2, [pc, #328]	; (8000e80 <HAL_ADC_Start+0x190>)
 8000d36:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3a:	0c9a      	lsrs	r2, r3, #18
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	4413      	add	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000d44:	e002      	b.n	8000d4c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d1f9      	bne.n	8000d46 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d17a      	bne.n	8000e56 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d68:	f023 0301 	bic.w	r3, r3, #1
 8000d6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d007      	beq.n	8000d92 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d9e:	d106      	bne.n	8000dae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da4:	f023 0206 	bic.w	r2, r3, #6
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	645a      	str	r2, [r3, #68]	; 0x44
 8000dac:	e002      	b.n	8000db4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2200      	movs	r2, #0
 8000db2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000dbc:	4b31      	ldr	r3, [pc, #196]	; (8000e84 <HAL_ADC_Start+0x194>)
 8000dbe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000dc8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 031f 	and.w	r3, r3, #31
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d12a      	bne.n	8000e2c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a2b      	ldr	r2, [pc, #172]	; (8000e88 <HAL_ADC_Start+0x198>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d015      	beq.n	8000e0c <HAL_ADC_Start+0x11c>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a29      	ldr	r2, [pc, #164]	; (8000e8c <HAL_ADC_Start+0x19c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d105      	bne.n	8000df6 <HAL_ADC_Start+0x106>
 8000dea:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <HAL_ADC_Start+0x194>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f003 031f 	and.w	r3, r3, #31
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d00a      	beq.n	8000e0c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a25      	ldr	r2, [pc, #148]	; (8000e90 <HAL_ADC_Start+0x1a0>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d136      	bne.n	8000e6e <HAL_ADC_Start+0x17e>
 8000e00:	4b20      	ldr	r3, [pc, #128]	; (8000e84 <HAL_ADC_Start+0x194>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 0310 	and.w	r3, r3, #16
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d130      	bne.n	8000e6e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d129      	bne.n	8000e6e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	e020      	b.n	8000e6e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a15      	ldr	r2, [pc, #84]	; (8000e88 <HAL_ADC_Start+0x198>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d11b      	bne.n	8000e6e <HAL_ADC_Start+0x17e>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d114      	bne.n	8000e6e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	e00b      	b.n	8000e6e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f043 0210 	orr.w	r2, r3, #16
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	f043 0201 	orr.w	r2, r3, #1
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000e6e:	2300      	movs	r3, #0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	431bde83 	.word	0x431bde83
 8000e84:	40012300 	.word	0x40012300
 8000e88:	40012000 	.word	0x40012000
 8000e8c:	40012100 	.word	0x40012100
 8000e90:	40012200 	.word	0x40012200

08000e94 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eb0:	d113      	bne.n	8000eda <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ec0:	d10b      	bne.n	8000eda <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f043 0220 	orr.w	r2, r3, #32
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e063      	b.n	8000fa2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000eda:	f7ff fe95 	bl	8000c08 <HAL_GetTick>
 8000ede:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000ee0:	e021      	b.n	8000f26 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee8:	d01d      	beq.n	8000f26 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d007      	beq.n	8000f00 <HAL_ADC_PollForConversion+0x6c>
 8000ef0:	f7ff fe8a 	bl	8000c08 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	683a      	ldr	r2, [r7, #0]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d212      	bcs.n	8000f26 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d00b      	beq.n	8000f26 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	f043 0204 	orr.w	r2, r3, #4
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e03d      	b.n	8000fa2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d1d6      	bne.n	8000ee2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f06f 0212 	mvn.w	r2, #18
 8000f3c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d123      	bne.n	8000fa0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d11f      	bne.n	8000fa0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f66:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d006      	beq.n	8000f7c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d111      	bne.n	8000fa0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d105      	bne.n	8000fa0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	f043 0201 	orr.w	r2, r3, #1
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d101      	bne.n	8000fe0 <HAL_ADC_ConfigChannel+0x1c>
 8000fdc:	2302      	movs	r3, #2
 8000fde:	e105      	b.n	80011ec <HAL_ADC_ConfigChannel+0x228>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b09      	cmp	r3, #9
 8000fee:	d925      	bls.n	800103c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	68d9      	ldr	r1, [r3, #12]
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4613      	mov	r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	4413      	add	r3, r2
 8001004:	3b1e      	subs	r3, #30
 8001006:	2207      	movs	r2, #7
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43da      	mvns	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	400a      	ands	r2, r1
 8001014:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68d9      	ldr	r1, [r3, #12]
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	b29b      	uxth	r3, r3
 8001026:	4618      	mov	r0, r3
 8001028:	4603      	mov	r3, r0
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	4403      	add	r3, r0
 800102e:	3b1e      	subs	r3, #30
 8001030:	409a      	lsls	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	430a      	orrs	r2, r1
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	e022      	b.n	8001082 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	6919      	ldr	r1, [r3, #16]
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	b29b      	uxth	r3, r3
 8001048:	461a      	mov	r2, r3
 800104a:	4613      	mov	r3, r2
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	4413      	add	r3, r2
 8001050:	2207      	movs	r2, #7
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43da      	mvns	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	400a      	ands	r2, r1
 800105e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6919      	ldr	r1, [r3, #16]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	b29b      	uxth	r3, r3
 8001070:	4618      	mov	r0, r3
 8001072:	4603      	mov	r3, r0
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4403      	add	r3, r0
 8001078:	409a      	lsls	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	430a      	orrs	r2, r1
 8001080:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b06      	cmp	r3, #6
 8001088:	d824      	bhi.n	80010d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	4613      	mov	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	3b05      	subs	r3, #5
 800109c:	221f      	movs	r2, #31
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43da      	mvns	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	400a      	ands	r2, r1
 80010aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	4618      	mov	r0, r3
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	3b05      	subs	r3, #5
 80010c6:	fa00 f203 	lsl.w	r2, r0, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	430a      	orrs	r2, r1
 80010d0:	635a      	str	r2, [r3, #52]	; 0x34
 80010d2:	e04c      	b.n	800116e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	2b0c      	cmp	r3, #12
 80010da:	d824      	bhi.n	8001126 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	3b23      	subs	r3, #35	; 0x23
 80010ee:	221f      	movs	r2, #31
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43da      	mvns	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	400a      	ands	r2, r1
 80010fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	b29b      	uxth	r3, r3
 800110a:	4618      	mov	r0, r3
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	4613      	mov	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	3b23      	subs	r3, #35	; 0x23
 8001118:	fa00 f203 	lsl.w	r2, r0, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	430a      	orrs	r2, r1
 8001122:	631a      	str	r2, [r3, #48]	; 0x30
 8001124:	e023      	b.n	800116e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	3b41      	subs	r3, #65	; 0x41
 8001138:	221f      	movs	r2, #31
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	400a      	ands	r2, r1
 8001146:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	b29b      	uxth	r3, r3
 8001154:	4618      	mov	r0, r3
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	4613      	mov	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4413      	add	r3, r2
 8001160:	3b41      	subs	r3, #65	; 0x41
 8001162:	fa00 f203 	lsl.w	r2, r0, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	430a      	orrs	r2, r1
 800116c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800116e:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <HAL_ADC_ConfigChannel+0x234>)
 8001170:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a21      	ldr	r2, [pc, #132]	; (80011fc <HAL_ADC_ConfigChannel+0x238>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d109      	bne.n	8001190 <HAL_ADC_ConfigChannel+0x1cc>
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b12      	cmp	r3, #18
 8001182:	d105      	bne.n	8001190 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a19      	ldr	r2, [pc, #100]	; (80011fc <HAL_ADC_ConfigChannel+0x238>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d123      	bne.n	80011e2 <HAL_ADC_ConfigChannel+0x21e>
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b10      	cmp	r3, #16
 80011a0:	d003      	beq.n	80011aa <HAL_ADC_ConfigChannel+0x1e6>
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b11      	cmp	r3, #17
 80011a8:	d11b      	bne.n	80011e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b10      	cmp	r3, #16
 80011bc:	d111      	bne.n	80011e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <HAL_ADC_ConfigChannel+0x23c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a10      	ldr	r2, [pc, #64]	; (8001204 <HAL_ADC_ConfigChannel+0x240>)
 80011c4:	fba2 2303 	umull	r2, r3, r2, r3
 80011c8:	0c9a      	lsrs	r2, r3, #18
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011d4:	e002      	b.n	80011dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	3b01      	subs	r3, #1
 80011da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1f9      	bne.n	80011d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	40012300 	.word	0x40012300
 80011fc:	40012000 	.word	0x40012000
 8001200:	20000000 	.word	0x20000000
 8001204:	431bde83 	.word	0x431bde83

08001208 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001210:	4b79      	ldr	r3, [pc, #484]	; (80013f8 <ADC_Init+0x1f0>)
 8001212:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	431a      	orrs	r2, r3
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800123c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6859      	ldr	r1, [r3, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	021a      	lsls	r2, r3, #8
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	430a      	orrs	r2, r1
 8001250:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001260:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6859      	ldr	r1, [r3, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	430a      	orrs	r2, r1
 8001272:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001282:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6899      	ldr	r1, [r3, #8]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68da      	ldr	r2, [r3, #12]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	430a      	orrs	r2, r1
 8001294:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129a:	4a58      	ldr	r2, [pc, #352]	; (80013fc <ADC_Init+0x1f4>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d022      	beq.n	80012e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6899      	ldr	r1, [r3, #8]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	430a      	orrs	r2, r1
 80012c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6899      	ldr	r1, [r3, #8]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	430a      	orrs	r2, r1
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	e00f      	b.n	8001306 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001304:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f022 0202 	bic.w	r2, r2, #2
 8001314:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6899      	ldr	r1, [r3, #8]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	7e1b      	ldrb	r3, [r3, #24]
 8001320:	005a      	lsls	r2, r3, #1
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	430a      	orrs	r2, r1
 8001328:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d01b      	beq.n	800136c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	685a      	ldr	r2, [r3, #4]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001342:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001352:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6859      	ldr	r1, [r3, #4]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135e:	3b01      	subs	r3, #1
 8001360:	035a      	lsls	r2, r3, #13
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	430a      	orrs	r2, r1
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	e007      	b.n	800137c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800137a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800138a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	3b01      	subs	r3, #1
 8001398:	051a      	lsls	r2, r3, #20
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	430a      	orrs	r2, r1
 80013a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6899      	ldr	r1, [r3, #8]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013be:	025a      	lsls	r2, r3, #9
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6899      	ldr	r1, [r3, #8]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	029a      	lsls	r2, r3, #10
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	609a      	str	r2, [r3, #8]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	40012300 	.word	0x40012300
 80013fc:	0f000001 	.word	0x0f000001

08001400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800141c:	4013      	ands	r3, r2
 800141e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800142c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001432:	4a04      	ldr	r2, [pc, #16]	; (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	60d3      	str	r3, [r2, #12]
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <__NVIC_GetPriorityGrouping+0x18>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	f003 0307 	and.w	r3, r3, #7
}
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001474:	2b00      	cmp	r3, #0
 8001476:	db0a      	blt.n	800148e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	b2da      	uxtb	r2, r3
 800147c:	490c      	ldr	r1, [pc, #48]	; (80014b0 <__NVIC_SetPriority+0x4c>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	0112      	lsls	r2, r2, #4
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	440b      	add	r3, r1
 8001488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800148c:	e00a      	b.n	80014a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4908      	ldr	r1, [pc, #32]	; (80014b4 <__NVIC_SetPriority+0x50>)
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	3b04      	subs	r3, #4
 800149c:	0112      	lsls	r2, r2, #4
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	440b      	add	r3, r1
 80014a2:	761a      	strb	r2, [r3, #24]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000e100 	.word	0xe000e100
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	; 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f1c3 0307 	rsb	r3, r3, #7
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	bf28      	it	cs
 80014d6:	2304      	movcs	r3, #4
 80014d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3304      	adds	r3, #4
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d902      	bls.n	80014e8 <NVIC_EncodePriority+0x30>
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3b03      	subs	r3, #3
 80014e6:	e000      	b.n	80014ea <NVIC_EncodePriority+0x32>
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	f04f 32ff 	mov.w	r2, #4294967295
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43da      	mvns	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	401a      	ands	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001500:	f04f 31ff 	mov.w	r1, #4294967295
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	43d9      	mvns	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	4313      	orrs	r3, r2
         );
}
 8001512:	4618      	mov	r0, r3
 8001514:	3724      	adds	r7, #36	; 0x24
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001530:	d301      	bcc.n	8001536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001532:	2301      	movs	r3, #1
 8001534:	e00f      	b.n	8001556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <SysTick_Config+0x40>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153e:	210f      	movs	r1, #15
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f7ff ff8e 	bl	8001464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <SysTick_Config+0x40>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <SysTick_Config+0x40>)
 8001550:	2207      	movs	r2, #7
 8001552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	e000e010 	.word	0xe000e010

08001564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff47 	bl	8001400 <__NVIC_SetPriorityGrouping>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800158c:	f7ff ff5c 	bl	8001448 <__NVIC_GetPriorityGrouping>
 8001590:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	6978      	ldr	r0, [r7, #20]
 8001598:	f7ff ff8e 	bl	80014b8 <NVIC_EncodePriority>
 800159c:	4602      	mov	r2, r0
 800159e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a2:	4611      	mov	r1, r2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff5d 	bl	8001464 <__NVIC_SetPriority>
}
 80015aa:	bf00      	nop
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ffb0 	bl	8001520 <SysTick_Config>
 80015c0:	4603      	mov	r3, r0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
 80015e6:	e16b      	b.n	80018c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015e8:	2201      	movs	r2, #1
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	429a      	cmp	r2, r3
 8001602:	f040 815a 	bne.w	80018ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	2b01      	cmp	r3, #1
 8001610:	d005      	beq.n	800161e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800161a:	2b02      	cmp	r3, #2
 800161c:	d130      	bne.n	8001680 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	2203      	movs	r2, #3
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4013      	ands	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	68da      	ldr	r2, [r3, #12]
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001654:	2201      	movs	r2, #1
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	091b      	lsrs	r3, r3, #4
 800166a:	f003 0201 	and.w	r2, r3, #1
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	2b03      	cmp	r3, #3
 800168a:	d017      	beq.n	80016bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	2203      	movs	r2, #3
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 0303 	and.w	r3, r3, #3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d123      	bne.n	8001710 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	08da      	lsrs	r2, r3, #3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3208      	adds	r2, #8
 80016d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	220f      	movs	r2, #15
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	691a      	ldr	r2, [r3, #16]
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	08da      	lsrs	r2, r3, #3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3208      	adds	r2, #8
 800170a:	69b9      	ldr	r1, [r7, #24]
 800170c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	2203      	movs	r2, #3
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0203 	and.w	r2, r3, #3
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80b4 	beq.w	80018ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b60      	ldr	r3, [pc, #384]	; (80018d8 <HAL_GPIO_Init+0x30c>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	4a5f      	ldr	r2, [pc, #380]	; (80018d8 <HAL_GPIO_Init+0x30c>)
 800175c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001760:	6453      	str	r3, [r2, #68]	; 0x44
 8001762:	4b5d      	ldr	r3, [pc, #372]	; (80018d8 <HAL_GPIO_Init+0x30c>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800176e:	4a5b      	ldr	r2, [pc, #364]	; (80018dc <HAL_GPIO_Init+0x310>)
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	089b      	lsrs	r3, r3, #2
 8001774:	3302      	adds	r3, #2
 8001776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	220f      	movs	r2, #15
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a52      	ldr	r2, [pc, #328]	; (80018e0 <HAL_GPIO_Init+0x314>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d02b      	beq.n	80017f2 <HAL_GPIO_Init+0x226>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a51      	ldr	r2, [pc, #324]	; (80018e4 <HAL_GPIO_Init+0x318>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d025      	beq.n	80017ee <HAL_GPIO_Init+0x222>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a50      	ldr	r2, [pc, #320]	; (80018e8 <HAL_GPIO_Init+0x31c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d01f      	beq.n	80017ea <HAL_GPIO_Init+0x21e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4f      	ldr	r2, [pc, #316]	; (80018ec <HAL_GPIO_Init+0x320>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d019      	beq.n	80017e6 <HAL_GPIO_Init+0x21a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4e      	ldr	r2, [pc, #312]	; (80018f0 <HAL_GPIO_Init+0x324>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d013      	beq.n	80017e2 <HAL_GPIO_Init+0x216>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a4d      	ldr	r2, [pc, #308]	; (80018f4 <HAL_GPIO_Init+0x328>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d00d      	beq.n	80017de <HAL_GPIO_Init+0x212>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a4c      	ldr	r2, [pc, #304]	; (80018f8 <HAL_GPIO_Init+0x32c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d007      	beq.n	80017da <HAL_GPIO_Init+0x20e>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a4b      	ldr	r2, [pc, #300]	; (80018fc <HAL_GPIO_Init+0x330>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d101      	bne.n	80017d6 <HAL_GPIO_Init+0x20a>
 80017d2:	2307      	movs	r3, #7
 80017d4:	e00e      	b.n	80017f4 <HAL_GPIO_Init+0x228>
 80017d6:	2308      	movs	r3, #8
 80017d8:	e00c      	b.n	80017f4 <HAL_GPIO_Init+0x228>
 80017da:	2306      	movs	r3, #6
 80017dc:	e00a      	b.n	80017f4 <HAL_GPIO_Init+0x228>
 80017de:	2305      	movs	r3, #5
 80017e0:	e008      	b.n	80017f4 <HAL_GPIO_Init+0x228>
 80017e2:	2304      	movs	r3, #4
 80017e4:	e006      	b.n	80017f4 <HAL_GPIO_Init+0x228>
 80017e6:	2303      	movs	r3, #3
 80017e8:	e004      	b.n	80017f4 <HAL_GPIO_Init+0x228>
 80017ea:	2302      	movs	r3, #2
 80017ec:	e002      	b.n	80017f4 <HAL_GPIO_Init+0x228>
 80017ee:	2301      	movs	r3, #1
 80017f0:	e000      	b.n	80017f4 <HAL_GPIO_Init+0x228>
 80017f2:	2300      	movs	r3, #0
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	f002 0203 	and.w	r2, r2, #3
 80017fa:	0092      	lsls	r2, r2, #2
 80017fc:	4093      	lsls	r3, r2
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001804:	4935      	ldr	r1, [pc, #212]	; (80018dc <HAL_GPIO_Init+0x310>)
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	089b      	lsrs	r3, r3, #2
 800180a:	3302      	adds	r3, #2
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001812:	4b3b      	ldr	r3, [pc, #236]	; (8001900 <HAL_GPIO_Init+0x334>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001836:	4a32      	ldr	r2, [pc, #200]	; (8001900 <HAL_GPIO_Init+0x334>)
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800183c:	4b30      	ldr	r3, [pc, #192]	; (8001900 <HAL_GPIO_Init+0x334>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001860:	4a27      	ldr	r2, [pc, #156]	; (8001900 <HAL_GPIO_Init+0x334>)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001866:	4b26      	ldr	r3, [pc, #152]	; (8001900 <HAL_GPIO_Init+0x334>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	43db      	mvns	r3, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4013      	ands	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800188a:	4a1d      	ldr	r2, [pc, #116]	; (8001900 <HAL_GPIO_Init+0x334>)
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001890:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <HAL_GPIO_Init+0x334>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018b4:	4a12      	ldr	r2, [pc, #72]	; (8001900 <HAL_GPIO_Init+0x334>)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3301      	adds	r3, #1
 80018be:	61fb      	str	r3, [r7, #28]
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	2b0f      	cmp	r3, #15
 80018c4:	f67f ae90 	bls.w	80015e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018c8:	bf00      	nop
 80018ca:	bf00      	nop
 80018cc:	3724      	adds	r7, #36	; 0x24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40013800 	.word	0x40013800
 80018e0:	40020000 	.word	0x40020000
 80018e4:	40020400 	.word	0x40020400
 80018e8:	40020800 	.word	0x40020800
 80018ec:	40020c00 	.word	0x40020c00
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40021400 	.word	0x40021400
 80018f8:	40021800 	.word	0x40021800
 80018fc:	40021c00 	.word	0x40021c00
 8001900:	40013c00 	.word	0x40013c00

08001904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	807b      	strh	r3, [r7, #2]
 8001910:	4613      	mov	r3, r2
 8001912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001914:	787b      	ldrb	r3, [r7, #1]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800191a:	887a      	ldrh	r2, [r7, #2]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001920:	e003      	b.n	800192a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001922:	887b      	ldrh	r3, [r7, #2]
 8001924:	041a      	lsls	r2, r3, #16
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	619a      	str	r2, [r3, #24]
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e267      	b.n	8001e1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d075      	beq.n	8001a42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001956:	4b88      	ldr	r3, [pc, #544]	; (8001b78 <HAL_RCC_OscConfig+0x240>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	2b04      	cmp	r3, #4
 8001960:	d00c      	beq.n	800197c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001962:	4b85      	ldr	r3, [pc, #532]	; (8001b78 <HAL_RCC_OscConfig+0x240>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800196a:	2b08      	cmp	r3, #8
 800196c:	d112      	bne.n	8001994 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800196e:	4b82      	ldr	r3, [pc, #520]	; (8001b78 <HAL_RCC_OscConfig+0x240>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800197a:	d10b      	bne.n	8001994 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197c:	4b7e      	ldr	r3, [pc, #504]	; (8001b78 <HAL_RCC_OscConfig+0x240>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d05b      	beq.n	8001a40 <HAL_RCC_OscConfig+0x108>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d157      	bne.n	8001a40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e242      	b.n	8001e1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800199c:	d106      	bne.n	80019ac <HAL_RCC_OscConfig+0x74>
 800199e:	4b76      	ldr	r3, [pc, #472]	; (8001b78 <HAL_RCC_OscConfig+0x240>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a75      	ldr	r2, [pc, #468]	; (8001b78 <HAL_RCC_OscConfig+0x240>)
 80019a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	e01d      	b.n	80019e8 <HAL_RCC_OscConfig+0xb0>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCC_OscConfig+0x98>
 80019b6:	4b70      	ldr	r3, [pc, #448]	; (8001b78 <HAL_RCC_OscConfig+0x240>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a6f      	ldr	r2, [pc, #444]	; (8001b78 <HAL_RCC_OscConfig+0x240>)
 80019bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	4b6d      	ldr	r3, [pc, #436]	; (8001b78 <HAL_RCC_OscConfig+0x240>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a6c      	ldr	r2, [pc, #432]	; (8001b78 <HAL_RCC_OscConfig+0x240>)
 80019c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e00b      	b.n	80019e8 <HAL_RCC_OscConfig+0xb0>
 80019d0:	4b69      	ldr	r3, [pc, #420]	; (8001b78 <HAL_RCC_OscConfig+0x240>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a68      	ldr	r2, [pc, #416]	; (8001b78 <HAL_RCC_OscConfig+0x240>)
 80019d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	4b66      	ldr	r3, [pc, #408]	; (8001b78 <HAL_RCC_OscConfig+0x240>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a65      	ldr	r2, [pc, #404]	; (8001b78 <HAL_RCC_OscConfig+0x240>)
 80019e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d013      	beq.n	8001a18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff f90a 	bl	8000c08 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff f906 	bl	8000c08 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	; 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e207      	b.n	8001e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	4b5b      	ldr	r3, [pc, #364]	; (8001b78 <HAL_RCC_OscConfig+0x240>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0xc0>
 8001a16:	e014      	b.n	8001a42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7ff f8f6 	bl	8000c08 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a20:	f7ff f8f2 	bl	8000c08 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	; 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e1f3      	b.n	8001e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a32:	4b51      	ldr	r3, [pc, #324]	; (8001b78 <HAL_RCC_OscConfig+0x240>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0xe8>
 8001a3e:	e000      	b.n	8001a42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d063      	beq.n	8001b16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a4e:	4b4a      	ldr	r3, [pc, #296]	; (8001b78 <HAL_RCC_OscConfig+0x240>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00b      	beq.n	8001a72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a5a:	4b47      	ldr	r3, [pc, #284]	; (8001b78 <HAL_RCC_OscConfig+0x240>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d11c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a66:	4b44      	ldr	r3, [pc, #272]	; (8001b78 <HAL_RCC_OscConfig+0x240>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d116      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a72:	4b41      	ldr	r3, [pc, #260]	; (8001b78 <HAL_RCC_OscConfig+0x240>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d005      	beq.n	8001a8a <HAL_RCC_OscConfig+0x152>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d001      	beq.n	8001a8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e1c7      	b.n	8001e1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8a:	4b3b      	ldr	r3, [pc, #236]	; (8001b78 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4937      	ldr	r1, [pc, #220]	; (8001b78 <HAL_RCC_OscConfig+0x240>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9e:	e03a      	b.n	8001b16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d020      	beq.n	8001aea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa8:	4b34      	ldr	r3, [pc, #208]	; (8001b7c <HAL_RCC_OscConfig+0x244>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aae:	f7ff f8ab 	bl	8000c08 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ab6:	f7ff f8a7 	bl	8000c08 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e1a8      	b.n	8001e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac8:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <HAL_RCC_OscConfig+0x240>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad4:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <HAL_RCC_OscConfig+0x240>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	4925      	ldr	r1, [pc, #148]	; (8001b78 <HAL_RCC_OscConfig+0x240>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	600b      	str	r3, [r1, #0]
 8001ae8:	e015      	b.n	8001b16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aea:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <HAL_RCC_OscConfig+0x244>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af0:	f7ff f88a 	bl	8000c08 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af8:	f7ff f886 	bl	8000c08 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e187      	b.n	8001e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0a:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d036      	beq.n	8001b90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d016      	beq.n	8001b58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <HAL_RCC_OscConfig+0x248>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b30:	f7ff f86a 	bl	8000c08 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b38:	f7ff f866 	bl	8000c08 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e167      	b.n	8001e1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0x200>
 8001b56:	e01b      	b.n	8001b90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_RCC_OscConfig+0x248>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5e:	f7ff f853 	bl	8000c08 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b64:	e00e      	b.n	8001b84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b66:	f7ff f84f 	bl	8000c08 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d907      	bls.n	8001b84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e150      	b.n	8001e1a <HAL_RCC_OscConfig+0x4e2>
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	42470000 	.word	0x42470000
 8001b80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b84:	4b88      	ldr	r3, [pc, #544]	; (8001da8 <HAL_RCC_OscConfig+0x470>)
 8001b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1ea      	bne.n	8001b66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 8097 	beq.w	8001ccc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ba2:	4b81      	ldr	r3, [pc, #516]	; (8001da8 <HAL_RCC_OscConfig+0x470>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10f      	bne.n	8001bce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	4b7d      	ldr	r3, [pc, #500]	; (8001da8 <HAL_RCC_OscConfig+0x470>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	4a7c      	ldr	r2, [pc, #496]	; (8001da8 <HAL_RCC_OscConfig+0x470>)
 8001bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bbe:	4b7a      	ldr	r3, [pc, #488]	; (8001da8 <HAL_RCC_OscConfig+0x470>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bce:	4b77      	ldr	r3, [pc, #476]	; (8001dac <HAL_RCC_OscConfig+0x474>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d118      	bne.n	8001c0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bda:	4b74      	ldr	r3, [pc, #464]	; (8001dac <HAL_RCC_OscConfig+0x474>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a73      	ldr	r2, [pc, #460]	; (8001dac <HAL_RCC_OscConfig+0x474>)
 8001be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be6:	f7ff f80f 	bl	8000c08 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bee:	f7ff f80b 	bl	8000c08 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e10c      	b.n	8001e1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c00:	4b6a      	ldr	r3, [pc, #424]	; (8001dac <HAL_RCC_OscConfig+0x474>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0f0      	beq.n	8001bee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d106      	bne.n	8001c22 <HAL_RCC_OscConfig+0x2ea>
 8001c14:	4b64      	ldr	r3, [pc, #400]	; (8001da8 <HAL_RCC_OscConfig+0x470>)
 8001c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c18:	4a63      	ldr	r2, [pc, #396]	; (8001da8 <HAL_RCC_OscConfig+0x470>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c20:	e01c      	b.n	8001c5c <HAL_RCC_OscConfig+0x324>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2b05      	cmp	r3, #5
 8001c28:	d10c      	bne.n	8001c44 <HAL_RCC_OscConfig+0x30c>
 8001c2a:	4b5f      	ldr	r3, [pc, #380]	; (8001da8 <HAL_RCC_OscConfig+0x470>)
 8001c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2e:	4a5e      	ldr	r2, [pc, #376]	; (8001da8 <HAL_RCC_OscConfig+0x470>)
 8001c30:	f043 0304 	orr.w	r3, r3, #4
 8001c34:	6713      	str	r3, [r2, #112]	; 0x70
 8001c36:	4b5c      	ldr	r3, [pc, #368]	; (8001da8 <HAL_RCC_OscConfig+0x470>)
 8001c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3a:	4a5b      	ldr	r2, [pc, #364]	; (8001da8 <HAL_RCC_OscConfig+0x470>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	6713      	str	r3, [r2, #112]	; 0x70
 8001c42:	e00b      	b.n	8001c5c <HAL_RCC_OscConfig+0x324>
 8001c44:	4b58      	ldr	r3, [pc, #352]	; (8001da8 <HAL_RCC_OscConfig+0x470>)
 8001c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c48:	4a57      	ldr	r2, [pc, #348]	; (8001da8 <HAL_RCC_OscConfig+0x470>)
 8001c4a:	f023 0301 	bic.w	r3, r3, #1
 8001c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c50:	4b55      	ldr	r3, [pc, #340]	; (8001da8 <HAL_RCC_OscConfig+0x470>)
 8001c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c54:	4a54      	ldr	r2, [pc, #336]	; (8001da8 <HAL_RCC_OscConfig+0x470>)
 8001c56:	f023 0304 	bic.w	r3, r3, #4
 8001c5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d015      	beq.n	8001c90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c64:	f7fe ffd0 	bl	8000c08 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c6a:	e00a      	b.n	8001c82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c6c:	f7fe ffcc 	bl	8000c08 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e0cb      	b.n	8001e1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c82:	4b49      	ldr	r3, [pc, #292]	; (8001da8 <HAL_RCC_OscConfig+0x470>)
 8001c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0ee      	beq.n	8001c6c <HAL_RCC_OscConfig+0x334>
 8001c8e:	e014      	b.n	8001cba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c90:	f7fe ffba 	bl	8000c08 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c96:	e00a      	b.n	8001cae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c98:	f7fe ffb6 	bl	8000c08 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e0b5      	b.n	8001e1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cae:	4b3e      	ldr	r3, [pc, #248]	; (8001da8 <HAL_RCC_OscConfig+0x470>)
 8001cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1ee      	bne.n	8001c98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cba:	7dfb      	ldrb	r3, [r7, #23]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d105      	bne.n	8001ccc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc0:	4b39      	ldr	r3, [pc, #228]	; (8001da8 <HAL_RCC_OscConfig+0x470>)
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	4a38      	ldr	r2, [pc, #224]	; (8001da8 <HAL_RCC_OscConfig+0x470>)
 8001cc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 80a1 	beq.w	8001e18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cd6:	4b34      	ldr	r3, [pc, #208]	; (8001da8 <HAL_RCC_OscConfig+0x470>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d05c      	beq.n	8001d9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d141      	bne.n	8001d6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cea:	4b31      	ldr	r3, [pc, #196]	; (8001db0 <HAL_RCC_OscConfig+0x478>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7fe ff8a 	bl	8000c08 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf8:	f7fe ff86 	bl	8000c08 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e087      	b.n	8001e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d0a:	4b27      	ldr	r3, [pc, #156]	; (8001da8 <HAL_RCC_OscConfig+0x470>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f0      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69da      	ldr	r2, [r3, #28]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	019b      	lsls	r3, r3, #6
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2c:	085b      	lsrs	r3, r3, #1
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	041b      	lsls	r3, r3, #16
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d38:	061b      	lsls	r3, r3, #24
 8001d3a:	491b      	ldr	r1, [pc, #108]	; (8001da8 <HAL_RCC_OscConfig+0x470>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d40:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <HAL_RCC_OscConfig+0x478>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d46:	f7fe ff5f 	bl	8000c08 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d4e:	f7fe ff5b 	bl	8000c08 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e05c      	b.n	8001e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d60:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <HAL_RCC_OscConfig+0x470>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0f0      	beq.n	8001d4e <HAL_RCC_OscConfig+0x416>
 8001d6c:	e054      	b.n	8001e18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6e:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <HAL_RCC_OscConfig+0x478>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d74:	f7fe ff48 	bl	8000c08 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d7c:	f7fe ff44 	bl	8000c08 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e045      	b.n	8001e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_RCC_OscConfig+0x470>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f0      	bne.n	8001d7c <HAL_RCC_OscConfig+0x444>
 8001d9a:	e03d      	b.n	8001e18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d107      	bne.n	8001db4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e038      	b.n	8001e1a <HAL_RCC_OscConfig+0x4e2>
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40007000 	.word	0x40007000
 8001db0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001db4:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <HAL_RCC_OscConfig+0x4ec>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d028      	beq.n	8001e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d121      	bne.n	8001e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d11a      	bne.n	8001e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001de4:	4013      	ands	r3, r2
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001dea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d111      	bne.n	8001e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfa:	085b      	lsrs	r3, r3, #1
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d107      	bne.n	8001e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d001      	beq.n	8001e18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e000      	b.n	8001e1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40023800 	.word	0x40023800

08001e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0cc      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e3c:	4b68      	ldr	r3, [pc, #416]	; (8001fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d90c      	bls.n	8001e64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4a:	4b65      	ldr	r3, [pc, #404]	; (8001fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e52:	4b63      	ldr	r3, [pc, #396]	; (8001fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d001      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e0b8      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d020      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e7c:	4b59      	ldr	r3, [pc, #356]	; (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	4a58      	ldr	r2, [pc, #352]	; (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e94:	4b53      	ldr	r3, [pc, #332]	; (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	4a52      	ldr	r2, [pc, #328]	; (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea0:	4b50      	ldr	r3, [pc, #320]	; (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	494d      	ldr	r1, [pc, #308]	; (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d044      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d107      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec6:	4b47      	ldr	r3, [pc, #284]	; (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d119      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e07f      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d003      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ee2:	2b03      	cmp	r3, #3
 8001ee4:	d107      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee6:	4b3f      	ldr	r3, [pc, #252]	; (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d109      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e06f      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef6:	4b3b      	ldr	r3, [pc, #236]	; (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e067      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f06:	4b37      	ldr	r3, [pc, #220]	; (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f023 0203 	bic.w	r2, r3, #3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	4934      	ldr	r1, [pc, #208]	; (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f18:	f7fe fe76 	bl	8000c08 <HAL_GetTick>
 8001f1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1e:	e00a      	b.n	8001f36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f20:	f7fe fe72 	bl	8000c08 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e04f      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f36:	4b2b      	ldr	r3, [pc, #172]	; (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 020c 	and.w	r2, r3, #12
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d1eb      	bne.n	8001f20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f48:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d20c      	bcs.n	8001f70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f56:	4b22      	ldr	r3, [pc, #136]	; (8001fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5e:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d001      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e032      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d008      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f7c:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	4916      	ldr	r1, [pc, #88]	; (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d009      	beq.n	8001fae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f9a:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	490e      	ldr	r1, [pc, #56]	; (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fae:	f000 f821 	bl	8001ff4 <HAL_RCC_GetSysClockFreq>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	091b      	lsrs	r3, r3, #4
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	490a      	ldr	r1, [pc, #40]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc0:	5ccb      	ldrb	r3, [r1, r3]
 8001fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc6:	4a09      	ldr	r2, [pc, #36]	; (8001fec <HAL_RCC_ClockConfig+0x1c4>)
 8001fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fca:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fdd6 	bl	8000b80 <HAL_InitTick>

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40023c00 	.word	0x40023c00
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	08002efc 	.word	0x08002efc
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	20000004 	.word	0x20000004

08001ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ff8:	b090      	sub	sp, #64	; 0x40
 8001ffa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	637b      	str	r3, [r7, #52]	; 0x34
 8002000:	2300      	movs	r3, #0
 8002002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002004:	2300      	movs	r3, #0
 8002006:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800200c:	4b59      	ldr	r3, [pc, #356]	; (8002174 <HAL_RCC_GetSysClockFreq+0x180>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 030c 	and.w	r3, r3, #12
 8002014:	2b08      	cmp	r3, #8
 8002016:	d00d      	beq.n	8002034 <HAL_RCC_GetSysClockFreq+0x40>
 8002018:	2b08      	cmp	r3, #8
 800201a:	f200 80a1 	bhi.w	8002160 <HAL_RCC_GetSysClockFreq+0x16c>
 800201e:	2b00      	cmp	r3, #0
 8002020:	d002      	beq.n	8002028 <HAL_RCC_GetSysClockFreq+0x34>
 8002022:	2b04      	cmp	r3, #4
 8002024:	d003      	beq.n	800202e <HAL_RCC_GetSysClockFreq+0x3a>
 8002026:	e09b      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002028:	4b53      	ldr	r3, [pc, #332]	; (8002178 <HAL_RCC_GetSysClockFreq+0x184>)
 800202a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800202c:	e09b      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800202e:	4b53      	ldr	r3, [pc, #332]	; (800217c <HAL_RCC_GetSysClockFreq+0x188>)
 8002030:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002032:	e098      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002034:	4b4f      	ldr	r3, [pc, #316]	; (8002174 <HAL_RCC_GetSysClockFreq+0x180>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800203c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800203e:	4b4d      	ldr	r3, [pc, #308]	; (8002174 <HAL_RCC_GetSysClockFreq+0x180>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d028      	beq.n	800209c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800204a:	4b4a      	ldr	r3, [pc, #296]	; (8002174 <HAL_RCC_GetSysClockFreq+0x180>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	099b      	lsrs	r3, r3, #6
 8002050:	2200      	movs	r2, #0
 8002052:	623b      	str	r3, [r7, #32]
 8002054:	627a      	str	r2, [r7, #36]	; 0x24
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800205c:	2100      	movs	r1, #0
 800205e:	4b47      	ldr	r3, [pc, #284]	; (800217c <HAL_RCC_GetSysClockFreq+0x188>)
 8002060:	fb03 f201 	mul.w	r2, r3, r1
 8002064:	2300      	movs	r3, #0
 8002066:	fb00 f303 	mul.w	r3, r0, r3
 800206a:	4413      	add	r3, r2
 800206c:	4a43      	ldr	r2, [pc, #268]	; (800217c <HAL_RCC_GetSysClockFreq+0x188>)
 800206e:	fba0 1202 	umull	r1, r2, r0, r2
 8002072:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002074:	460a      	mov	r2, r1
 8002076:	62ba      	str	r2, [r7, #40]	; 0x28
 8002078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800207a:	4413      	add	r3, r2
 800207c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800207e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002080:	2200      	movs	r2, #0
 8002082:	61bb      	str	r3, [r7, #24]
 8002084:	61fa      	str	r2, [r7, #28]
 8002086:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800208a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800208e:	f7fe f89b 	bl	80001c8 <__aeabi_uldivmod>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4613      	mov	r3, r2
 8002098:	63fb      	str	r3, [r7, #60]	; 0x3c
 800209a:	e053      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800209c:	4b35      	ldr	r3, [pc, #212]	; (8002174 <HAL_RCC_GetSysClockFreq+0x180>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	099b      	lsrs	r3, r3, #6
 80020a2:	2200      	movs	r2, #0
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	617a      	str	r2, [r7, #20]
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80020ae:	f04f 0b00 	mov.w	fp, #0
 80020b2:	4652      	mov	r2, sl
 80020b4:	465b      	mov	r3, fp
 80020b6:	f04f 0000 	mov.w	r0, #0
 80020ba:	f04f 0100 	mov.w	r1, #0
 80020be:	0159      	lsls	r1, r3, #5
 80020c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020c4:	0150      	lsls	r0, r2, #5
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	ebb2 080a 	subs.w	r8, r2, sl
 80020ce:	eb63 090b 	sbc.w	r9, r3, fp
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	f04f 0300 	mov.w	r3, #0
 80020da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80020de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80020e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80020e6:	ebb2 0408 	subs.w	r4, r2, r8
 80020ea:	eb63 0509 	sbc.w	r5, r3, r9
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	f04f 0300 	mov.w	r3, #0
 80020f6:	00eb      	lsls	r3, r5, #3
 80020f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020fc:	00e2      	lsls	r2, r4, #3
 80020fe:	4614      	mov	r4, r2
 8002100:	461d      	mov	r5, r3
 8002102:	eb14 030a 	adds.w	r3, r4, sl
 8002106:	603b      	str	r3, [r7, #0]
 8002108:	eb45 030b 	adc.w	r3, r5, fp
 800210c:	607b      	str	r3, [r7, #4]
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	f04f 0300 	mov.w	r3, #0
 8002116:	e9d7 4500 	ldrd	r4, r5, [r7]
 800211a:	4629      	mov	r1, r5
 800211c:	028b      	lsls	r3, r1, #10
 800211e:	4621      	mov	r1, r4
 8002120:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002124:	4621      	mov	r1, r4
 8002126:	028a      	lsls	r2, r1, #10
 8002128:	4610      	mov	r0, r2
 800212a:	4619      	mov	r1, r3
 800212c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800212e:	2200      	movs	r2, #0
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	60fa      	str	r2, [r7, #12]
 8002134:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002138:	f7fe f846 	bl	80001c8 <__aeabi_uldivmod>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4613      	mov	r3, r2
 8002142:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <HAL_RCC_GetSysClockFreq+0x180>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	0c1b      	lsrs	r3, r3, #16
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	3301      	adds	r3, #1
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002154:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002158:	fbb2 f3f3 	udiv	r3, r2, r3
 800215c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800215e:	e002      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_RCC_GetSysClockFreq+0x184>)
 8002162:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002164:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002168:	4618      	mov	r0, r3
 800216a:	3740      	adds	r7, #64	; 0x40
 800216c:	46bd      	mov	sp, r7
 800216e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800
 8002178:	00f42400 	.word	0x00f42400
 800217c:	017d7840 	.word	0x017d7840

08002180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e041      	b.n	8002216 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7fe fc0a 	bl	80009c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3304      	adds	r3, #4
 80021bc:	4619      	mov	r1, r3
 80021be:	4610      	mov	r0, r2
 80021c0:	f000 fad8 	bl	8002774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e041      	b.n	80022b4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d106      	bne.n	800224a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f839 	bl	80022bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2202      	movs	r2, #2
 800224e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3304      	adds	r3, #4
 800225a:	4619      	mov	r1, r3
 800225c:	4610      	mov	r0, r2
 800225e:	f000 fa89 	bl	8002774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d109      	bne.n	80022f4 <HAL_TIM_PWM_Start+0x24>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	bf14      	ite	ne
 80022ec:	2301      	movne	r3, #1
 80022ee:	2300      	moveq	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	e022      	b.n	800233a <HAL_TIM_PWM_Start+0x6a>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d109      	bne.n	800230e <HAL_TIM_PWM_Start+0x3e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b01      	cmp	r3, #1
 8002304:	bf14      	ite	ne
 8002306:	2301      	movne	r3, #1
 8002308:	2300      	moveq	r3, #0
 800230a:	b2db      	uxtb	r3, r3
 800230c:	e015      	b.n	800233a <HAL_TIM_PWM_Start+0x6a>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b08      	cmp	r3, #8
 8002312:	d109      	bne.n	8002328 <HAL_TIM_PWM_Start+0x58>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b01      	cmp	r3, #1
 800231e:	bf14      	ite	ne
 8002320:	2301      	movne	r3, #1
 8002322:	2300      	moveq	r3, #0
 8002324:	b2db      	uxtb	r3, r3
 8002326:	e008      	b.n	800233a <HAL_TIM_PWM_Start+0x6a>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b01      	cmp	r3, #1
 8002332:	bf14      	ite	ne
 8002334:	2301      	movne	r3, #1
 8002336:	2300      	moveq	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e07c      	b.n	800243c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d104      	bne.n	8002352 <HAL_TIM_PWM_Start+0x82>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2202      	movs	r2, #2
 800234c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002350:	e013      	b.n	800237a <HAL_TIM_PWM_Start+0xaa>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b04      	cmp	r3, #4
 8002356:	d104      	bne.n	8002362 <HAL_TIM_PWM_Start+0x92>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2202      	movs	r2, #2
 800235c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002360:	e00b      	b.n	800237a <HAL_TIM_PWM_Start+0xaa>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b08      	cmp	r3, #8
 8002366:	d104      	bne.n	8002372 <HAL_TIM_PWM_Start+0xa2>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002370:	e003      	b.n	800237a <HAL_TIM_PWM_Start+0xaa>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2202      	movs	r2, #2
 8002376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2201      	movs	r2, #1
 8002380:	6839      	ldr	r1, [r7, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f000 fce0 	bl	8002d48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a2d      	ldr	r2, [pc, #180]	; (8002444 <HAL_TIM_PWM_Start+0x174>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d004      	beq.n	800239c <HAL_TIM_PWM_Start+0xcc>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a2c      	ldr	r2, [pc, #176]	; (8002448 <HAL_TIM_PWM_Start+0x178>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d101      	bne.n	80023a0 <HAL_TIM_PWM_Start+0xd0>
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <HAL_TIM_PWM_Start+0xd2>
 80023a0:	2300      	movs	r3, #0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d007      	beq.n	80023b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a22      	ldr	r2, [pc, #136]	; (8002444 <HAL_TIM_PWM_Start+0x174>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d022      	beq.n	8002406 <HAL_TIM_PWM_Start+0x136>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c8:	d01d      	beq.n	8002406 <HAL_TIM_PWM_Start+0x136>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a1f      	ldr	r2, [pc, #124]	; (800244c <HAL_TIM_PWM_Start+0x17c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d018      	beq.n	8002406 <HAL_TIM_PWM_Start+0x136>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a1d      	ldr	r2, [pc, #116]	; (8002450 <HAL_TIM_PWM_Start+0x180>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d013      	beq.n	8002406 <HAL_TIM_PWM_Start+0x136>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a1c      	ldr	r2, [pc, #112]	; (8002454 <HAL_TIM_PWM_Start+0x184>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d00e      	beq.n	8002406 <HAL_TIM_PWM_Start+0x136>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a16      	ldr	r2, [pc, #88]	; (8002448 <HAL_TIM_PWM_Start+0x178>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d009      	beq.n	8002406 <HAL_TIM_PWM_Start+0x136>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a18      	ldr	r2, [pc, #96]	; (8002458 <HAL_TIM_PWM_Start+0x188>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d004      	beq.n	8002406 <HAL_TIM_PWM_Start+0x136>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a16      	ldr	r2, [pc, #88]	; (800245c <HAL_TIM_PWM_Start+0x18c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d111      	bne.n	800242a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b06      	cmp	r3, #6
 8002416:	d010      	beq.n	800243a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0201 	orr.w	r2, r2, #1
 8002426:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002428:	e007      	b.n	800243a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0201 	orr.w	r2, r2, #1
 8002438:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40010000 	.word	0x40010000
 8002448:	40010400 	.word	0x40010400
 800244c:	40000400 	.word	0x40000400
 8002450:	40000800 	.word	0x40000800
 8002454:	40000c00 	.word	0x40000c00
 8002458:	40014000 	.word	0x40014000
 800245c:	40001800 	.word	0x40001800

08002460 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800247a:	2302      	movs	r3, #2
 800247c:	e0ae      	b.n	80025dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b0c      	cmp	r3, #12
 800248a:	f200 809f 	bhi.w	80025cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800248e:	a201      	add	r2, pc, #4	; (adr r2, 8002494 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002494:	080024c9 	.word	0x080024c9
 8002498:	080025cd 	.word	0x080025cd
 800249c:	080025cd 	.word	0x080025cd
 80024a0:	080025cd 	.word	0x080025cd
 80024a4:	08002509 	.word	0x08002509
 80024a8:	080025cd 	.word	0x080025cd
 80024ac:	080025cd 	.word	0x080025cd
 80024b0:	080025cd 	.word	0x080025cd
 80024b4:	0800254b 	.word	0x0800254b
 80024b8:	080025cd 	.word	0x080025cd
 80024bc:	080025cd 	.word	0x080025cd
 80024c0:	080025cd 	.word	0x080025cd
 80024c4:	0800258b 	.word	0x0800258b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 f9f0 	bl	80028b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699a      	ldr	r2, [r3, #24]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0208 	orr.w	r2, r2, #8
 80024e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699a      	ldr	r2, [r3, #24]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0204 	bic.w	r2, r2, #4
 80024f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6999      	ldr	r1, [r3, #24]
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	619a      	str	r2, [r3, #24]
      break;
 8002506:	e064      	b.n	80025d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68b9      	ldr	r1, [r7, #8]
 800250e:	4618      	mov	r0, r3
 8002510:	f000 fa40 	bl	8002994 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699a      	ldr	r2, [r3, #24]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699a      	ldr	r2, [r3, #24]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6999      	ldr	r1, [r3, #24]
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	021a      	lsls	r2, r3, #8
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	619a      	str	r2, [r3, #24]
      break;
 8002548:	e043      	b.n	80025d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68b9      	ldr	r1, [r7, #8]
 8002550:	4618      	mov	r0, r3
 8002552:	f000 fa95 	bl	8002a80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	69da      	ldr	r2, [r3, #28]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f042 0208 	orr.w	r2, r2, #8
 8002564:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	69da      	ldr	r2, [r3, #28]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0204 	bic.w	r2, r2, #4
 8002574:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	69d9      	ldr	r1, [r3, #28]
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	61da      	str	r2, [r3, #28]
      break;
 8002588:	e023      	b.n	80025d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68b9      	ldr	r1, [r7, #8]
 8002590:	4618      	mov	r0, r3
 8002592:	f000 fae9 	bl	8002b68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	69da      	ldr	r2, [r3, #28]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	69da      	ldr	r2, [r3, #28]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	69d9      	ldr	r1, [r3, #28]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	021a      	lsls	r2, r3, #8
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	61da      	str	r2, [r3, #28]
      break;
 80025ca:	e002      	b.n	80025d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	75fb      	strb	r3, [r7, #23]
      break;
 80025d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025da:	7dfb      	ldrb	r3, [r7, #23]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_TIM_ConfigClockSource+0x1c>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e0b4      	b.n	800276a <HAL_TIM_ConfigClockSource+0x186>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800261e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002626:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002638:	d03e      	beq.n	80026b8 <HAL_TIM_ConfigClockSource+0xd4>
 800263a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800263e:	f200 8087 	bhi.w	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002646:	f000 8086 	beq.w	8002756 <HAL_TIM_ConfigClockSource+0x172>
 800264a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800264e:	d87f      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002650:	2b70      	cmp	r3, #112	; 0x70
 8002652:	d01a      	beq.n	800268a <HAL_TIM_ConfigClockSource+0xa6>
 8002654:	2b70      	cmp	r3, #112	; 0x70
 8002656:	d87b      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002658:	2b60      	cmp	r3, #96	; 0x60
 800265a:	d050      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0x11a>
 800265c:	2b60      	cmp	r3, #96	; 0x60
 800265e:	d877      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002660:	2b50      	cmp	r3, #80	; 0x50
 8002662:	d03c      	beq.n	80026de <HAL_TIM_ConfigClockSource+0xfa>
 8002664:	2b50      	cmp	r3, #80	; 0x50
 8002666:	d873      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002668:	2b40      	cmp	r3, #64	; 0x40
 800266a:	d058      	beq.n	800271e <HAL_TIM_ConfigClockSource+0x13a>
 800266c:	2b40      	cmp	r3, #64	; 0x40
 800266e:	d86f      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002670:	2b30      	cmp	r3, #48	; 0x30
 8002672:	d064      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x15a>
 8002674:	2b30      	cmp	r3, #48	; 0x30
 8002676:	d86b      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002678:	2b20      	cmp	r3, #32
 800267a:	d060      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x15a>
 800267c:	2b20      	cmp	r3, #32
 800267e:	d867      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002680:	2b00      	cmp	r3, #0
 8002682:	d05c      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x15a>
 8002684:	2b10      	cmp	r3, #16
 8002686:	d05a      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x15a>
 8002688:	e062      	b.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6899      	ldr	r1, [r3, #8]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f000 fb35 	bl	8002d08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	609a      	str	r2, [r3, #8]
      break;
 80026b6:	e04f      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	6899      	ldr	r1, [r3, #8]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f000 fb1e 	bl	8002d08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026da:	609a      	str	r2, [r3, #8]
      break;
 80026dc:	e03c      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	6859      	ldr	r1, [r3, #4]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	461a      	mov	r2, r3
 80026ec:	f000 fa92 	bl	8002c14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2150      	movs	r1, #80	; 0x50
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 faeb 	bl	8002cd2 <TIM_ITRx_SetConfig>
      break;
 80026fc:	e02c      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6859      	ldr	r1, [r3, #4]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	461a      	mov	r2, r3
 800270c:	f000 fab1 	bl	8002c72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2160      	movs	r1, #96	; 0x60
 8002716:	4618      	mov	r0, r3
 8002718:	f000 fadb 	bl	8002cd2 <TIM_ITRx_SetConfig>
      break;
 800271c:	e01c      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6859      	ldr	r1, [r3, #4]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	461a      	mov	r2, r3
 800272c:	f000 fa72 	bl	8002c14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2140      	movs	r1, #64	; 0x40
 8002736:	4618      	mov	r0, r3
 8002738:	f000 facb 	bl	8002cd2 <TIM_ITRx_SetConfig>
      break;
 800273c:	e00c      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4619      	mov	r1, r3
 8002748:	4610      	mov	r0, r2
 800274a:	f000 fac2 	bl	8002cd2 <TIM_ITRx_SetConfig>
      break;
 800274e:	e003      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	73fb      	strb	r3, [r7, #15]
      break;
 8002754:	e000      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002756:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002768:	7bfb      	ldrb	r3, [r7, #15]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a40      	ldr	r2, [pc, #256]	; (8002888 <TIM_Base_SetConfig+0x114>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d013      	beq.n	80027b4 <TIM_Base_SetConfig+0x40>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002792:	d00f      	beq.n	80027b4 <TIM_Base_SetConfig+0x40>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a3d      	ldr	r2, [pc, #244]	; (800288c <TIM_Base_SetConfig+0x118>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00b      	beq.n	80027b4 <TIM_Base_SetConfig+0x40>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a3c      	ldr	r2, [pc, #240]	; (8002890 <TIM_Base_SetConfig+0x11c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d007      	beq.n	80027b4 <TIM_Base_SetConfig+0x40>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a3b      	ldr	r2, [pc, #236]	; (8002894 <TIM_Base_SetConfig+0x120>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d003      	beq.n	80027b4 <TIM_Base_SetConfig+0x40>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a3a      	ldr	r2, [pc, #232]	; (8002898 <TIM_Base_SetConfig+0x124>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d108      	bne.n	80027c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a2f      	ldr	r2, [pc, #188]	; (8002888 <TIM_Base_SetConfig+0x114>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d02b      	beq.n	8002826 <TIM_Base_SetConfig+0xb2>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d4:	d027      	beq.n	8002826 <TIM_Base_SetConfig+0xb2>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a2c      	ldr	r2, [pc, #176]	; (800288c <TIM_Base_SetConfig+0x118>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d023      	beq.n	8002826 <TIM_Base_SetConfig+0xb2>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a2b      	ldr	r2, [pc, #172]	; (8002890 <TIM_Base_SetConfig+0x11c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d01f      	beq.n	8002826 <TIM_Base_SetConfig+0xb2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a2a      	ldr	r2, [pc, #168]	; (8002894 <TIM_Base_SetConfig+0x120>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d01b      	beq.n	8002826 <TIM_Base_SetConfig+0xb2>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a29      	ldr	r2, [pc, #164]	; (8002898 <TIM_Base_SetConfig+0x124>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d017      	beq.n	8002826 <TIM_Base_SetConfig+0xb2>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a28      	ldr	r2, [pc, #160]	; (800289c <TIM_Base_SetConfig+0x128>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <TIM_Base_SetConfig+0xb2>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a27      	ldr	r2, [pc, #156]	; (80028a0 <TIM_Base_SetConfig+0x12c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d00f      	beq.n	8002826 <TIM_Base_SetConfig+0xb2>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a26      	ldr	r2, [pc, #152]	; (80028a4 <TIM_Base_SetConfig+0x130>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d00b      	beq.n	8002826 <TIM_Base_SetConfig+0xb2>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a25      	ldr	r2, [pc, #148]	; (80028a8 <TIM_Base_SetConfig+0x134>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d007      	beq.n	8002826 <TIM_Base_SetConfig+0xb2>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a24      	ldr	r2, [pc, #144]	; (80028ac <TIM_Base_SetConfig+0x138>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d003      	beq.n	8002826 <TIM_Base_SetConfig+0xb2>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a23      	ldr	r2, [pc, #140]	; (80028b0 <TIM_Base_SetConfig+0x13c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d108      	bne.n	8002838 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800282c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4313      	orrs	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	4313      	orrs	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <TIM_Base_SetConfig+0x114>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d003      	beq.n	800286c <TIM_Base_SetConfig+0xf8>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a0c      	ldr	r2, [pc, #48]	; (8002898 <TIM_Base_SetConfig+0x124>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d103      	bne.n	8002874 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	615a      	str	r2, [r3, #20]
}
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40010000 	.word	0x40010000
 800288c:	40000400 	.word	0x40000400
 8002890:	40000800 	.word	0x40000800
 8002894:	40000c00 	.word	0x40000c00
 8002898:	40010400 	.word	0x40010400
 800289c:	40014000 	.word	0x40014000
 80028a0:	40014400 	.word	0x40014400
 80028a4:	40014800 	.word	0x40014800
 80028a8:	40001800 	.word	0x40001800
 80028ac:	40001c00 	.word	0x40001c00
 80028b0:	40002000 	.word	0x40002000

080028b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	f023 0201 	bic.w	r2, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0303 	bic.w	r3, r3, #3
 80028ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f023 0302 	bic.w	r3, r3, #2
 80028fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	4313      	orrs	r3, r2
 8002906:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a20      	ldr	r2, [pc, #128]	; (800298c <TIM_OC1_SetConfig+0xd8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d003      	beq.n	8002918 <TIM_OC1_SetConfig+0x64>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a1f      	ldr	r2, [pc, #124]	; (8002990 <TIM_OC1_SetConfig+0xdc>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d10c      	bne.n	8002932 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f023 0308 	bic.w	r3, r3, #8
 800291e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	4313      	orrs	r3, r2
 8002928:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f023 0304 	bic.w	r3, r3, #4
 8002930:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a15      	ldr	r2, [pc, #84]	; (800298c <TIM_OC1_SetConfig+0xd8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d003      	beq.n	8002942 <TIM_OC1_SetConfig+0x8e>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a14      	ldr	r2, [pc, #80]	; (8002990 <TIM_OC1_SetConfig+0xdc>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d111      	bne.n	8002966 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	621a      	str	r2, [r3, #32]
}
 8002980:	bf00      	nop
 8002982:	371c      	adds	r7, #28
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	40010000 	.word	0x40010000
 8002990:	40010400 	.word	0x40010400

08002994 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	f023 0210 	bic.w	r2, r3, #16
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	021b      	lsls	r3, r3, #8
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f023 0320 	bic.w	r3, r3, #32
 80029de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a22      	ldr	r2, [pc, #136]	; (8002a78 <TIM_OC2_SetConfig+0xe4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d003      	beq.n	80029fc <TIM_OC2_SetConfig+0x68>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a21      	ldr	r2, [pc, #132]	; (8002a7c <TIM_OC2_SetConfig+0xe8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d10d      	bne.n	8002a18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a17      	ldr	r2, [pc, #92]	; (8002a78 <TIM_OC2_SetConfig+0xe4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d003      	beq.n	8002a28 <TIM_OC2_SetConfig+0x94>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a16      	ldr	r2, [pc, #88]	; (8002a7c <TIM_OC2_SetConfig+0xe8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d113      	bne.n	8002a50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	621a      	str	r2, [r3, #32]
}
 8002a6a:	bf00      	nop
 8002a6c:	371c      	adds	r7, #28
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40010000 	.word	0x40010000
 8002a7c:	40010400 	.word	0x40010400

08002a80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f023 0303 	bic.w	r3, r3, #3
 8002ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	021b      	lsls	r3, r3, #8
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a21      	ldr	r2, [pc, #132]	; (8002b60 <TIM_OC3_SetConfig+0xe0>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d003      	beq.n	8002ae6 <TIM_OC3_SetConfig+0x66>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a20      	ldr	r2, [pc, #128]	; (8002b64 <TIM_OC3_SetConfig+0xe4>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d10d      	bne.n	8002b02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002aec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	021b      	lsls	r3, r3, #8
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a16      	ldr	r2, [pc, #88]	; (8002b60 <TIM_OC3_SetConfig+0xe0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d003      	beq.n	8002b12 <TIM_OC3_SetConfig+0x92>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a15      	ldr	r2, [pc, #84]	; (8002b64 <TIM_OC3_SetConfig+0xe4>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d113      	bne.n	8002b3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	621a      	str	r2, [r3, #32]
}
 8002b54:	bf00      	nop
 8002b56:	371c      	adds	r7, #28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	40010000 	.word	0x40010000
 8002b64:	40010400 	.word	0x40010400

08002b68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	031b      	lsls	r3, r3, #12
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a12      	ldr	r2, [pc, #72]	; (8002c0c <TIM_OC4_SetConfig+0xa4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d003      	beq.n	8002bd0 <TIM_OC4_SetConfig+0x68>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a11      	ldr	r2, [pc, #68]	; (8002c10 <TIM_OC4_SetConfig+0xa8>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d109      	bne.n	8002be4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	019b      	lsls	r3, r3, #6
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	621a      	str	r2, [r3, #32]
}
 8002bfe:	bf00      	nop
 8002c00:	371c      	adds	r7, #28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40010000 	.word	0x40010000
 8002c10:	40010400 	.word	0x40010400

08002c14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b087      	sub	sp, #28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	f023 0201 	bic.w	r2, r3, #1
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f023 030a 	bic.w	r3, r3, #10
 8002c50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	621a      	str	r2, [r3, #32]
}
 8002c66:	bf00      	nop
 8002c68:	371c      	adds	r7, #28
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b087      	sub	sp, #28
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	60f8      	str	r0, [r7, #12]
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	f023 0210 	bic.w	r2, r3, #16
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	031b      	lsls	r3, r3, #12
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	621a      	str	r2, [r3, #32]
}
 8002cc6:	bf00      	nop
 8002cc8:	371c      	adds	r7, #28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b085      	sub	sp, #20
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f043 0307 	orr.w	r3, r3, #7
 8002cf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	609a      	str	r2, [r3, #8]
}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
 8002d14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	021a      	lsls	r2, r3, #8
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	609a      	str	r2, [r3, #8]
}
 8002d3c:	bf00      	nop
 8002d3e:	371c      	adds	r7, #28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a1a      	ldr	r2, [r3, #32]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	401a      	ands	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a1a      	ldr	r2, [r3, #32]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f003 031f 	and.w	r3, r3, #31
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d80:	431a      	orrs	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	621a      	str	r2, [r3, #32]
}
 8002d86:	bf00      	nop
 8002d88:	371c      	adds	r7, #28
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
	...

08002d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002da8:	2302      	movs	r3, #2
 8002daa:	e05a      	b.n	8002e62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a21      	ldr	r2, [pc, #132]	; (8002e70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d022      	beq.n	8002e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df8:	d01d      	beq.n	8002e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a1d      	ldr	r2, [pc, #116]	; (8002e74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d018      	beq.n	8002e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a1b      	ldr	r2, [pc, #108]	; (8002e78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d013      	beq.n	8002e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a1a      	ldr	r2, [pc, #104]	; (8002e7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d00e      	beq.n	8002e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a18      	ldr	r2, [pc, #96]	; (8002e80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d009      	beq.n	8002e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a17      	ldr	r2, [pc, #92]	; (8002e84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d004      	beq.n	8002e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a15      	ldr	r2, [pc, #84]	; (8002e88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d10c      	bne.n	8002e50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40010000 	.word	0x40010000
 8002e74:	40000400 	.word	0x40000400
 8002e78:	40000800 	.word	0x40000800
 8002e7c:	40000c00 	.word	0x40000c00
 8002e80:	40010400 	.word	0x40010400
 8002e84:	40014000 	.word	0x40014000
 8002e88:	40001800 	.word	0x40001800

08002e8c <__libc_init_array>:
 8002e8c:	b570      	push	{r4, r5, r6, lr}
 8002e8e:	4d0d      	ldr	r5, [pc, #52]	; (8002ec4 <__libc_init_array+0x38>)
 8002e90:	4c0d      	ldr	r4, [pc, #52]	; (8002ec8 <__libc_init_array+0x3c>)
 8002e92:	1b64      	subs	r4, r4, r5
 8002e94:	10a4      	asrs	r4, r4, #2
 8002e96:	2600      	movs	r6, #0
 8002e98:	42a6      	cmp	r6, r4
 8002e9a:	d109      	bne.n	8002eb0 <__libc_init_array+0x24>
 8002e9c:	4d0b      	ldr	r5, [pc, #44]	; (8002ecc <__libc_init_array+0x40>)
 8002e9e:	4c0c      	ldr	r4, [pc, #48]	; (8002ed0 <__libc_init_array+0x44>)
 8002ea0:	f000 f820 	bl	8002ee4 <_init>
 8002ea4:	1b64      	subs	r4, r4, r5
 8002ea6:	10a4      	asrs	r4, r4, #2
 8002ea8:	2600      	movs	r6, #0
 8002eaa:	42a6      	cmp	r6, r4
 8002eac:	d105      	bne.n	8002eba <__libc_init_array+0x2e>
 8002eae:	bd70      	pop	{r4, r5, r6, pc}
 8002eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eb4:	4798      	blx	r3
 8002eb6:	3601      	adds	r6, #1
 8002eb8:	e7ee      	b.n	8002e98 <__libc_init_array+0xc>
 8002eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ebe:	4798      	blx	r3
 8002ec0:	3601      	adds	r6, #1
 8002ec2:	e7f2      	b.n	8002eaa <__libc_init_array+0x1e>
 8002ec4:	08002f14 	.word	0x08002f14
 8002ec8:	08002f14 	.word	0x08002f14
 8002ecc:	08002f14 	.word	0x08002f14
 8002ed0:	08002f18 	.word	0x08002f18

08002ed4 <memset>:
 8002ed4:	4402      	add	r2, r0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d100      	bne.n	8002ede <memset+0xa>
 8002edc:	4770      	bx	lr
 8002ede:	f803 1b01 	strb.w	r1, [r3], #1
 8002ee2:	e7f9      	b.n	8002ed8 <memset+0x4>

08002ee4 <_init>:
 8002ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee6:	bf00      	nop
 8002ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eea:	bc08      	pop	{r3}
 8002eec:	469e      	mov	lr, r3
 8002eee:	4770      	bx	lr

08002ef0 <_fini>:
 8002ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ef2:	bf00      	nop
 8002ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ef6:	bc08      	pop	{r3}
 8002ef8:	469e      	mov	lr, r3
 8002efa:	4770      	bx	lr
